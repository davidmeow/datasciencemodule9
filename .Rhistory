label = "Choose a number",
value = 25, min = 1, max = 100))
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui<-fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"))
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage()
server <- function(input, output) {output$hist <- renderPlot({
hist(rnorm(100))})
shinyApp(ui = ui, server = server)
ui<-fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"))
server <- function(input, output) {output$hist <- renderPlot({
hist(rnorm(input$number),main=title))}
shinyApp(ui = ui, server = server)
ui<-fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"))
server <- function(input, output) {output$hist <- renderPlot({
hist(rnorm(input$num),main=title))}
shinyApp(ui = ui, server = server)
ui<-fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"))
server <- function(input, output) {output$hist <- renderPlot({
hist(rnorm(input$num),main=title))})
})
shinyApp(ui = ui, server = server)
ui<-fluidPage(sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist"))
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
})
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
View(cars)
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
MyPlot
myPlot
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
myPlot
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
myPlot
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
# This function plots distance versus speed, each de-meaned and an
# associated line of slope s.
# Which of the following code will make a manipulate plot that creates
# a slider for the slope?
# manipulate(myPlot, s = slider(0, 2, step = 0.1))
# manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
# manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
# This function plots distance versus speed, each de-meaned and an
# associated line of slope s.
# Which of the following code will make a manipulate plot that creates
# a slider for the slope?
# manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
# Question 1
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
# This function plots distance versus speed, each de-meaned and an
# associated line of slope s.
# Which of the following code will make a manipulate plot that creates
# a slider for the slope?
manipulate(myPlot, s = slider(0, 2, step = 0.1))
# manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
# manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
# manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
# Question 1
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot
# This function plots distance versus speed, each de-meaned and an
# associated line of slope s.
# Which of the following code will make a manipulate plot that creates
# a slider for the slope?
# vmanipulate(myPlot, s = slider(0, 2, step = 0.1))
# manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
# manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
shinyServer(
function(input, output) {
output$myHist <- renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
}
)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
require(rCharts)
haireye<-as.data.frame(HairEyeColor)
n1<-nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
n1$save<-('fig/n1.html',cdn=TRUE)
cat('<iframe src="fig/n1.html", width=100%,height =600 >< /iframe>')
install.packages("rChart")
require(rCharts)
install.packages("rCharts")
require(rCharts)
haireye<-as.data.frame(HairEyeColor)
n1<-nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
n1$save<-('fig/n1.html',cdn=TRUE)
cat('<iframe src="fig/n1.html", width=100%,height =600 >< /iframe>')
haireye<-as.data.frame(HairEyeColor)
n1<-nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
n1$save<-('fig/n1.html'cdn=TRUE)
cat('<iframe src="fig/n1.html", width=100%,height =600 >< /iframe>')
n1
haireye<-as.data.frame(HairEyeColor)
n1<-nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
n1$save<-('fig/n1.html', cdn=TRUE)
cat('<iframe src="fig/n1.html", width=100%,height =600 >< /iframe>')
require(rCharts)
haireye<-as.data.frame(HairEyeColor)
n1<-nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
n1$save<-('fig/n1.html', cdn=TRUE)
cat('<iframe src="fig/n1.html", width=100%,height =600 >< /iframe>')
nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
nPlot(Freq~Eye,group='eye',type='MultiBarChart',data=subset(haireye,Sex=='Male'))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
suppressPackageStartupMessages(library(googleVis))
## Warning: package 'googleVis' was built under R version 3.0.3
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
(library(googleVis)
)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
demo(googleVis)
library(rCharts)
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h3('Sidebar text')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(devtools)
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
library(slidify)
install.packages("slidify")
install.packages("slidify")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
install_github('ramnathv/slidify', ref = 'dev')
is.installed('slidify')
install_github('ramnathv/slidify', ref = 'dev')
library(devtools)
install_github('ramnathv/slidify', ref = 'dev')
install.packages("stringi")
install_github('ramnathv/slidify', ref = 'dev')
install_github('slidifyLibraries', 'ramnathv')
library(shinyapps)
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
library(shinyapps)
shinyapps::setAccountInfo(name='davidmeow', token='3E2B7D3D4242EB0549952193DA669DA2', secret='swpTXwXIWqQf5K1oRsJS6Z6qYb/7fAQI2CHkoTBY')
shinyapps::deployApp('D:/1. Coursera/1. John Hopkins - Data Science/9. Developing Data Products/Experiment Two')
shinyapps::deployApp()
install.packages("yhatr")
library(yhatr)
install.packages("DDPQuiz3")
library(rattle)
rattle()
install.oackages("mapview")
install.packages("mapview")
library(ggplot2)
library(rgdal)
library(mapview)
data(diamonds)
big <- diamonds[rep(seq_len(nrow(diamonds)), 40), ]
big$cut <- as.character(big$cut)
big$color <- as.character(big$color)
big$clarity <- as.character(big$clarity)
### provide some random positions
big$x <- rnorm(nrow(big), 0, 10)
big$y <- rnorm(nrow(big), 0, 10)
coordinates(big) <- ~x+y
proj4string(big) <- CRS("+init=epsg:4326")
### view it
mapview(big)
library(mapview)
library("ggplot2", lib.loc="~/R/win-library/3.2")
install.packages(c("ape", "BH", "car", "caret", "choroplethr", "coin", "curl", "data.table", "DiagrammeR", "doParallel", "fields", "foreach", "forecast", "geosphere", "GGally", "ggmap", "ggplot2", "git2r", "gsl", "HistData", "Hmisc", "htmltools", "irlba", "iterators", "jsonlite", "lubridate", "manipulate", "maps", "MASS", "Matrix", "mgcv", "mice", "networkD3", "party", "pbkrtest", "plotly", "randomForest", "raster", "rattle", "Rcpp", "RcppArmadillo", "RcppEigen", "rgdal", "rgl", "rmarkdown", "roxygen2", "rpart.plot", "rstudioapi", "seriation", "sp", "spam", "testthat", "timeSeries", "V8", "viridis", "visNetwork", "xtable"))
install.packages("quenteda")
申<-1
1<-身
shen<-monkey
shen<-"monkey""
shen<-as.character("monkey")
shen
shen<-as.character(monkey)
shen<-as.character("申")
shen
library("choroplethrMaps", lib.loc="~/R/win-library/3.2")
?choroplethrMaps
library("ggmap", lib.loc="~/R/win-library/3.2")
?ggmap
library(shiny)
ui<-fluidPage()
sliderInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
sliderInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)
)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
numericInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)
)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
numericInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)
plotOutput("hist"))
server <-function(input, output) {
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
numericInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)
)
plotOutput("hist")
server <-function(input, output) {
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
titlePanel("title panel"),
sidebarLayout(
sidebarPanel( "sidebar panel"),
mainPanel("main panel",
h1("First level title"))
)
)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
titlePanel("Page with Slider Input Demo"),
sidebarLayout(
sidebarPanel(sliderInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)),
mainPanel("main panel",
h1("First level title"))
)
)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
titlePanel("Page with Slider Input Demo"),
sidebarLayout(
sidebarPanel(sliderInput(inputId= "num", label = "Choose a number", value=10, min = 1, max = 50)),
mainPanel("main panel",
plotOutput("hist"))
)
)
server <-function(input, output) {}
shinyApp(ui= ui, server = server)
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
titlePanel("Page with Slider Input Demo"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId= "num",label = "Choose a number", value = 10, min = 1, max = 50)),
mainPanel("main panel",
plotOutput("hist")
)
))
server <-function(input, output) {
output$hist <-renderPlot({hist(rnorm(input$num))
})
}
shinyApp(ui= ui, server = server)
library(shiny)
ui<-fluidPage(
titlePanel("Page with Slider Input Demo"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId= "num",label = "Choose a number", value = 10, min = 1, max = 50)),
mainPanel("main panel",
plotOutput("hist")
)
))
server <-function(input, output) {
output$hist <-renderPlot({hist(rnorm(input$num))
})
}
shinyApp(ui= ui, server = server)
shiny::runApp('C:/Users/David Meow/Desktop/Test')
shiny::runApp('D:/1. Coursera/1. John Hopkins - Data Science/9. Developing Data Products/Materials from MDEC/shiny/shiny/BMI')
shiny::runApp('D:/1. Coursera/1. John Hopkins - Data Science/9. Developing Data Products/Materials from MDEC/shiny/shiny/diabetic')
manipulate(plot(1:x), x = slider(1, 100))
library(manipulate)
manipulate(plot(1:x), x = slider(1, 100))
manipulate(
plot(cars, xlim=c(0,x.max)), x.max=slider(15,25)
library(manipulate)
manipulate(
plot(cars, xlim=c(0,x.max)), x.max=slider(15,25)
library(manipulate)
manipulate(
plot(cars, xlim=c(0,x.max)), x.max=slider(15,25))
manipulate(plot(1:x), x = slider(1, 100))
manipulate(
plot(cars, xlim=c(0,x.max)), x.max=slider(15,25))
library(manipulate)
manipulate(
barplot(as.matrix(longley[,factor]), beside = TRUE, main = factor), factor = picker("GNP", "Unemployed", "Employed"))
install.packages("shinydashboard")
library(rCharts)
library(rCharts)
library(datasets)
data(iris)
names(iris) <-gsub("\\.", "", names(iris))
rPlot(SepalLength~ SepalWidth| Species, data = iris, color = 'Species', type = 'point')
haireye= as.data.frame(HairEyeColor)
## Generate the plot
n1 = nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
## Display the plot
n1
library(devtools)
install_github('ramnathv/slidify')
install_github('ramnathv/slidifyLibraries')
rPlot(Weight~Time|Diet, data=BodyWeight,color="Diet',type='point')
library(nlme)
library(nlme)
data(BodyWeight)
rPlot(Weight~Time|Diet, data=BodyWeight,color="Diet',type='point')
)
library(shiny)
runExample("01_hello")
shiny::runApp('C:/Users/David Meow/Desktop/Shiny Assignment')
shiny::runApp('C:/Users/David Meow/Desktop/Shiny Assignment')
shiny::runApp('C:/Users/David Meow/Desktop/Shiny Assignment')
install.packages("igraph")
library(igraph)
#import the sample_adjmatrix file:
dat=read.csv(file.choose(),header=TRUE,row.names=1,check.names=FALSE)
m=as.matrix(dat)
net=graph.adjacency(m,mode="undirected",weighted=NULL,diag=FALSE)
#import the sample_attributes
a=read.csv(file.choose())
nodecolor=as.character(a$Sex[match(V(net)$name,a$Bird.ID)])
nodecolor=gsub("F","red",nodecolor)
nodecolor=gsub("M","blue",nodecolor)
nodesize=degree(net)*5
plot.igraph(net,vertex.label=NA,layout=layout.fruchterman.reingold, vertex.color=nodecolor,vertex.size=nodesize)
setwd("C:/Users/David Meow/Desktop/Shiny 2")
shiny::runApp()
createmean <- function(x) {
answer <- mean(x)
return(answer)
}
shiny::runApp()
---
- Bullet 1
nodeClickColour = "red", textColour = "black",
zoom = F)
subdata<-subset(netdata,netdata$Date=="2006-01-05")
simpleNetwork(subdata, Source = "Seller", Target = "Buyer", height = NULL,
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('ShinyApps')
setwd("C:/Users/David Meow/Desktop/Shiny 2/ShinyApps")
shiny::runApp()
